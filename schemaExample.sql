CREATE DATABASE IF NOT EXISTS store_database;
USE store_database;

CREATE TABLE IF NOT EXISTS ADMINISTRADORES (
    ID_ADMINISTRADOR INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(50) NOT NULL,
    PASSWORD VARCHAR(150) NOT NULL,
    EMAIL VARCHAR(100) NOT NULL
);

CREATE TABLE IF NOT EXISTS CATEGORIAS (
    ID_CATEGORIA INT AUTO_INCREMENT PRIMARY KEY,
    NOMBRE VARCHAR(100) NOT NULL,
    ADMINISTRADOR_ID INT,
    FOREIGN KEY (ADMINISTRADOR_ID) REFERENCES ADMINISTRADORES(ID_ADMINISTRADOR) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS CLIENTES (
    ID_CLIENTE INT AUTO_INCREMENT PRIMARY KEY,
    CEDULA VARCHAR(20) NOT NULL,
    NOMBRE VARCHAR(100) NOT NULL,
    TELEFONO VARCHAR(25),
    EMAIL VARCHAR(100),
    DIRECCION VARCHAR(255),
    FECHA_REGISTRO DATE,
    ADMINISTRADOR_ID INT,
    FOREIGN KEY (ADMINISTRADOR_ID) REFERENCES ADMINISTRADORES(ID_ADMINISTRADOR) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PRODUCTOS (
    ID_PRODUCTO INT AUTO_INCREMENT PRIMARY KEY,
    CATEGORIA_ID INT,
    NOMBRE VARCHAR(100) NOT NULL,
    DESCRIPCION TEXT,
    PRECIO_COMPRA DECIMAL(10,2),
    PRECIO DECIMAL(10, 2),
    CANTIDAD INT,
    IMAGEN VARCHAR(255),
    ADMINISTRADOR_ID INT,
    FOREIGN KEY (CATEGORIA_ID) REFERENCES CATEGORIAS(ID_CATEGORIA) ON DELETE SET NULL,
    FOREIGN KEY (ADMINISTRADOR_ID) REFERENCES ADMINISTRADORES(ID_ADMINISTRADOR) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS VENTAS (
    ID_VENTA INT AUTO_INCREMENT PRIMARY KEY,
    CLIENTE_ID INT,
    MONTO_TOTAL DECIMAL(10, 2),
    MONTO_PENDIENTE DECIMAL(10, 2),
    FECHA_VENTA DATE,
    ESTADO_PAGO ENUM('PAGADO', 'PENDIENTE') DEFAULT 'PENDIENTE',
    TIPO_PAGO ENUM('AL CONTADO', 'POR ABONO') DEFAULT 'AL CONTADO',
    ADMINISTRADOR_ID INT,
    FOREIGN KEY (CLIENTE_ID) REFERENCES CLIENTES(ID_CLIENTE) ON DELETE CASCADE,
    FOREIGN KEY (ADMINISTRADOR_ID) REFERENCES ADMINISTRADORES(ID_ADMINISTRADOR) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS VENTAS_PRODUCTOS (
    VENTA_ID INT,
    PRODUCTO_ID INT,
    CANTIDAD INT,
    PRIMARY KEY (VENTA_ID, PRODUCTO_ID),
    FOREIGN KEY (VENTA_ID) REFERENCES VENTAS(ID_VENTA) ON DELETE CASCADE,
    FOREIGN KEY (PRODUCTO_ID) REFERENCES PRODUCTOS(ID_PRODUCTO) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS TASAS_CAMBIO (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    MONEDA VARCHAR(50) NOT NULL,
    TASA DECIMAL(10, 4) NOT NULL,
    ADMINISTRADOR_ID INT,
    FOREIGN KEY (ADMINISTRADOR_ID) REFERENCES ADMINISTRADORES(ID_ADMINISTRADOR) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS PAGOS (
    ID_PAGO INT AUTO_INCREMENT PRIMARY KEY,
    VENTA_ID INT,
    MONTO_ABONADO DECIMAL(10, 2),
    FECHA_PAGO DATE,
    MANERA_PAGO VARCHAR(50),
    NUMERO_REFERENCIA VARCHAR(50),
    ESTADO_VENTA ENUM('PENDIENTE','PAGADO') NOT NULL,
    MONTO_PENDIENTE_AL_MOMENTO DECIMAL(10, 2),
    FOREIGN KEY (VENTA_ID) REFERENCES VENTAS(ID_VENTA) ON DELETE CASCADE
);

CREATE TABLE IF NOT EXISTS TOKENS (
    ID INT AUTO_INCREMENT PRIMARY KEY,
    ADMINISTRADOR_ID INT NOT NULL,
    TOKEN VARCHAR(255) NOT NULL,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ADMINISTRADOR_ID) REFERENCES ADMINISTRADORES(ID_ADMINISTRADOR) ON DELETE CASCADE
);

DELIMITER //

        CREATE TRIGGER actualizar_monto_pendiente
        AFTER INSERT ON PAGOS
        FOR EACH ROW
        BEGIN
            -- Obtener el monto pendiente actual de la venta
            DECLARE monto_pendiente_actual DECIMAL(10, 2);
            SELECT MONTO_PENDIENTE INTO monto_pendiente_actual
            FROM VENTAS
            WHERE ID_VENTA = NEW.VENTA_ID;
            
            -- Actualizar el monto pendiente en la tabla VENTAS
            UPDATE VENTAS
            SET MONTO_PENDIENTE = monto_pendiente_actual - NEW.MONTO_ABONADO
            WHERE ID_VENTA = NEW.VENTA_ID;

            -- Verificar si el monto pendiente es 0 y actualizar el estado de pago a "PAGADO"
            IF (monto_pendiente_actual - NEW.MONTO_ABONADO) <= 0 THEN
                UPDATE VENTAS
                SET ESTADO_PAGO = 'PAGADO', MONTO_PENDIENTE = 0
                WHERE ID_VENTA = NEW.VENTA_ID;
            END IF;
        END //

        DELIMITER ;


    --TRIGER PAGOS
    DELIMITER //

        CREATE TRIGGER actualizar_estado_y_monto_pendiente_pagos
        BEFORE INSERT ON PAGOS
        FOR EACH ROW
        BEGIN
            DECLARE estado_actual VARCHAR(10);
            DECLARE monto_pendiente_actual DECIMAL(10, 2);

            -- Obtener el estado actual y el monto pendiente de la venta desde la tabla VENTAS
            SELECT ESTADO_PAGO, MONTO_PENDIENTE INTO estado_actual, monto_pendiente_actual
            FROM VENTAS
            WHERE ID_VENTA = NEW.VENTA_ID;

            -- Asignar estos valores a las columnas de la tabla PAGOS para el nuevo registro
            SET NEW.ESTADO_VENTA = estado_actual;
            SET NEW.MONTO_PENDIENTE_AL_MOMENTO = monto_pendiente_actual;

            -- Verificar si el monto pendiente después del abono es 0
            IF (monto_pendiente_actual - NEW.MONTO_ABONADO) <= 0 THEN
                -- Si el monto pendiente es 0 o menos, actualizar el estado de pago a 'PAGADO'
                SET NEW.ESTADO_VENTA = 'PAGADO';
            END IF;

            -- No realizamos actualizaciones en la tabla VENTAS aquí, solo actualizamos la tabla PAGOS
        END //

    DELIMITER ;